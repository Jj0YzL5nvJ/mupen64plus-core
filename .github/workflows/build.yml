name: Core

on:
  push:
    paths-ignore:
      - '.{gitattributes,gitignore,travis.yml}'
      - '*.md,appveyor.yml,README'
  pull_request:
    paths-ignore:
      - '.{gitattributes,gitignore,travis.yml}'
      - '*.md,appveyor.yml,README'
  workflow_dispatch:

jobs:

  Linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - cc: GCC
            arch: x64
            bits: 64
          - cc: GCC
            arch: x86
            bits: 32
          - cc: Clang
            arch: x64
            bits: 64
          - cc: Clang
            arch: x86
            bits: 32
    name: Linux / ${{ matrix.cc }} / ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Get build dependencies and arrange the environment
        run: |
          echo "G_REV=$(git rev-parse --short HEAD)" >> "${GITHUB_ENV}"
          export BUILD_DEPS="libfreetype6-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl1.2-dev libsdl2-dev libvulkan-dev zlib1g-dev"
          ./.github/workflows/scripts/ci_install_ubuntu_deps.sh --${{ matrix.arch }} --${{ matrix.cc }}
      - name: Build and related stuff, backup binaries
        run: |
          if [[ "${{ matrix.arch }}" == "x86" ]]; then export BITS="32" CROSS_C="i686-linux-gnu-" CPU_TUNE="-march=pentium4" PIC="1"; else export BITS="64" CPU_TUNE="-march=nocona"; fi
          export OPTFLAGS="-O3 -flto ${CPU_TUNE}"
          ORIG="$(pwd)"
          CC="${CROSS_C}gcc"
          CXX="${CROSS_C}g++"
          if [[ "${{ matrix.cc }}" != "GCC" ]]; then
            CC="clang"
            CXX="clang++"
          fi
          ${CC} --version
          SDL="sdl"
          MSG="1.2"
          mkdir pkg
          chmod -R 755 pkg
          for DYN in 0 1 0 1; do
            unset POSTFIX
            if [[ ${DYN} -eq 0 ]]; then export POSTFIX="-old"; else MSG="${MSG} / NEW_DYNAREC"; fi
            echo ""
            echo ":: ${{ matrix.cc }} ${{ matrix.arch }} / SDL${MSG} ::"
            echo ""
            make NEW_DYNAREC="${DYN}" KEYBINDINGS="0" ACCURATE_FPU="${DYN}" -C projects/unix clean
            echo ""
            make CC="${CC}" CXX="${CXX}" BITS="${BITS}" SDL_CONFIG="${SDL}-config" NEW_DYNAREC="${DYN}" KEYBINDINGS="0" ACCURATE_FPU="${DYN}" -C projects/unix all -j4
            echo ""
            make BITS="${BITS}" NEW_DYNAREC="${DYN}" KEYBINDINGS="0" ACCURATE_FPU="${DYN}" -C projects/unix install DESTDIR="${ORIG}/pkg/"
            echo ""
            ls -gG pkg/usr/local/lib/libmupen64plus${POSTFIX}.so*
            echo ""
            ldd pkg/usr/local/lib/libmupen64plus${POSTFIX}.so.2.0.0
            if [[ ${DYN} -eq 1 ]]; then
              SDL="sdl2"
              MSG="2"
            fi
          done
          echo ""
          cd pkg
          zip -r mupen64plus-core-linux-${{ matrix.arch }}-g${{ env.G_REV }}.zip usr
      - name: Upload artifact
        if: matrix.cc == 'GCC'
        uses: actions/upload-artifact@v4
        with:
          name: mupen64plus-core-linux-${{ matrix.arch }}-g${{ env.G_REV }}
          path: pkg/*.zip

  MSYS2:
    strategy:
      fail-fast: false
      matrix:
        include:
          - cc: GCC
            arch: x64
            cross: x86_64
            env: MINGW64
          - cc: GCC
            arch: x86
            cross: i686
            env: MINGW32
    name: Windows / MSYS2 ${{ matrix.cc }} / ${{ matrix.arch }}
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.env }}
          update: true
          install: >-
            git
            libtool
            make
            mingw-w64-${{ matrix.cross }}-gcc
            mingw-w64-${{ matrix.cross }}-toolchain
            mingw-w64-${{ matrix.cross }}-freetype
            mingw-w64-${{ matrix.cross }}-libpng
            mingw-w64-${{ matrix.cross }}-nasm
            mingw-w64-${{ matrix.cross }}-ntldd
            mingw-w64-${{ matrix.cross }}-SDL2
            mingw-w64-${{ matrix.cross }}-vulkan-headers
            mingw-w64-${{ matrix.cross }}-zlib
      - name: Build and related stuff, backup binaries
        run: |
          echo "G_REV=$(git rev-parse --short HEAD)" >> "${GITHUB_ENV}"
          if [[ "${{ matrix.arch }}" == "x86" ]]; then export BITS="32" CPU_TUNE="-march=pentium4"; else export BITS="64" CPU_TUNE="-march=nocona"; fi
          export OPTFLAGS="-O3 -flto ${CPU_TUNE}"
          ORIG="$(pwd)"
          CC="gcc"
          CXX="g++"
          ${CC} --version
          mkdir pkg
          export POSTFIX="-old"
          for DYN in 0 1; do
            echo ""
            echo ":: ${{ matrix.cc }} ${{ matrix.arch }} / SDL2${MSG} ::"
            echo ""
            make NEW_DYNAREC="${DYN}" KEYBINDINGS="0" ACCURATE_FPU="${DYN}" -C projects/unix clean
            echo ""
            make CC="${CC}" CXX="${CXX}" BITS="${BITS}" NEW_DYNAREC="${DYN}" KEYBINDINGS="0" ACCURATE_FPU="${DYN}" -C projects/unix all -j4
            echo ""
            make BITS="${BITS}" NEW_DYNAREC="${DYN}" KEYBINDINGS="0" ACCURATE_FPU="${DYN}" -C projects/unix install PLUGINDIR="" SHAREDIR="" BINDIR="" MANDIR="" LIBDIR="" APPSDIR="" ICONSDIR="icons" INCDIR="api" DESTDIR="${ORIG}/pkg/"
            echo ""
            ls -gG pkg/mupen64plus${POSTFIX}.dll
            echo ""
            ntldd pkg/mupen64plus${POSTFIX}.dll > pkg/ldd.log
            cat pkg/ldd.log
            unset POSTFIX
            MSG=" / NEW_DYNAREC"
          done
      - name: Backup dependencies, etc...
        run: |
          ./.github/workflows/scripts/ci_msys2_backup_deps.sh ${{ matrix.env }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mupen64plus-core-msys2-${{ matrix.arch }}-g${{ env.G_REV }}
          path: pkg/*

  MSVC:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: v143
            arch: x64
            vs: 2022
          - toolset: v141_xp
            arch: x86
            vs: 2019
    name: Windows / MSVC with ${{ matrix.toolset }} / ${{ matrix.arch }}
    runs-on: windows-${{ matrix.vs }}
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v4
      - uses: microsoft/setup-msbuild@v2
      - name: Build and related stuff, backup binaries
        run: |
          for /f "tokens=1" %%R in ('git rev-parse --short HEAD') do echo G_REV=%%R>> "%GITHUB_ENV%"
          set "ARCH=${{ matrix.arch }}"
          if [%ARCH%] == [x86] set "ARCH=Win32"
          echo.
          msbuild --version
          echo.
          git clone --depth 1 https://github.com/mupen64plus/mupen64plus-win32-deps.git ..\mupen64plus-win32-deps
          md pkg
          for %%B in (Release New_Dynarec_Release) do (
            echo.
            msbuild projects\msvc\mupen64plus-core.vcxproj /p:Configuration=%%B;Platform=%ARCH%;PlatformToolset=${{ matrix.toolset }} /t:Rebuild
            echo.
            copy "projects\msvc\%ARCH%\%%B\mupen64plus.dll" pkg\
            if not exist "pkg\mupen64plus-old.dll" (
              ren "pkg\mupen64plus.dll" mupen64plus-old.dll
              dir pkg\mupen64plus-old.dll
            ) else dir pkg\mupen64plus.dll
          )
      - name: Backup dependencies, etc...
        run: |
          xcopy data pkg
          copy "..\mupen64plus-win32-deps\freetype-2.13.0\lib\${{ matrix.arch }}\*.dll" pkg\
          copy "..\mupen64plus-win32-deps\libpng-1.6.39\lib\${{ matrix.arch }}\*.dll" pkg\
          copy "..\mupen64plus-win32-deps\SDL2-2.26.3\lib\${{ matrix.arch }}\*.dll" pkg\
          copy "..\mupen64plus-win32-deps\SDL2_net-2.2.0\lib\${{ matrix.arch }}\*.dll" pkg\
          copy "..\mupen64plus-win32-deps\zlib-1.2.13\lib\${{ matrix.arch }}\*.dll" pkg\
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mupen64plus-core-msvc-${{ matrix.arch }}-g${{ env.G_REV }}
          path: pkg/*

  Nightly-build:
    runs-on: ubuntu-latest
    if: github.ref_name == 'indy'
    needs: [Linux, MSYS2, MSVC]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
      - name: Get some tools
        run: |
          sudo apt-get update
          sudo apt-get -y install hashdeep
      - name: Creating new artifacts and update nightly-build
        run: |
          mkdir pkg
          cd binaries
          for BIN in *; do
            cd "${BIN}"
            case "${BIN}" in
              *msvc* | *msys2* )
                echo ":: Creating ${BIN}.zip"
                zip -r "../../pkg/${BIN}.zip" *
                ;;
              * )
                echo ":: Recovering ${BIN}.zip"
                mv *.zip ../../pkg/
                ;;
            esac
            cd ..
          done
          cd ../pkg
          echo ""
          for BIN in *; do
            ls -gG ${BIN}
            tigerdeep -lz ${BIN} >> ../${BIN:0:16}.tiger.txt
            sha256sum ${BIN} >> ../${BIN:0:16}.sha256.txt
            sha512sum ${BIN} >> ../${BIN:0:16}.sha512.txt
            b2sum ${BIN} >> ../${BIN:0:16}.blake2.txt
          done
          mv ../*.tiger.txt .
          mv ../*.sha*.txt .
          mv ../*.blake2.txt .
          echo ""
          echo "TIGER:"
          cat *.tiger.txt
          echo ""
          echo "SHA256:"
          cat *.sha256.txt
          echo ""
          echo "SHA512:"
          cat *.sha512.txt
          echo ""
          echo "BLAKE2:"
          cat *.blake2.txt
          echo ""
          git tag -f fix-newdyn-for-indy
          git push -f origin fix-newdyn-for-indy
      - name: Nightly-build
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          allowUpdates: true
          removeArtifacts: true
          replacesArtifacts: false
          tag: fix-newdyn-for-indy
          artifacts: pkg/*
